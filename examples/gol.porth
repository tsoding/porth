include "std.porth"

// constants
macro ROWS 10 end
macro COLS 20 end
macro BOARD_SIZE ROWS COLS * end

// memory layout
memory delta_time sizeof(timespec) end
memory board_current_index sizeof(u64) end
memory nbors sizeof(u64) end
memory value sizeof(u64) end
memory board_base BOARD_SIZE 2 * end
memory display COLS 1 + end

proc board_current
  board_base board_current_index @64 BOARD_SIZE * +
end

proc board_next
  board_base 1 board_current_index @64 - BOARD_SIZE * +
end

proc swap_boards
  1 board_current_index @64 - board_current_index !64
end

proc display_row
  0 while dup COLS < do
    2dup + @8 0 = if
      display over + '.' swap !8
    else
      display over + '#' swap !8
    end
    1 +
  end drop
  COLS display + '\n' swap !8
  COLS 1 + display puts
  drop
end

proc display_board
  0 while dup ROWS < do
    2dup COLS * + display_row
    1 +
  end drop
  drop
end

proc display_current_board
  board_current display_board
end

proc get_current_cell
  swap COLS * + board_current + @8
end

proc set_next_cell
  value !64
  swap COLS * + board_next +
  value @64
  swap !8
end

proc in_bounds
  dup 0 >= swap COLS < and
  swap
  dup 0 >= swap ROWS < and
  and
end

proc count_current_nbors
  0 nbors !64

  2dup 1 - swap 1 - swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup 1 - 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup 1 - swap 1 + swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup swap 1 - swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup swap 1 + swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup 1 + swap 1 - swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup 1 + 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2dup 1 + swap 1 + swap 2dup in_bounds
  rot rot swap COLS * + board_current + @8 1 =
  and if nbors inc64 end

  2drop
  nbors @64
end

proc compute_next_board
  0 while dup ROWS < do
    0 while dup COLS < do
      2dup get_current_cell 1 = if
        2dup count_current_nbors
        dup 2 = swap 3 = or if
          2dup 1 set_next_cell
        else
          2dup 0 set_next_cell
        end
      else
        2dup count_current_nbors 3 = if
          2dup 1 set_next_cell
        else
          2dup 0 set_next_cell
        end
      end

      1 +
    end drop
    1 +
  end drop
end

// .*.
// ..*
// ***
proc put_glider
   dup 0 COLS * 1 + + 1 swap !8
   dup 1 COLS * 2 + + 1 swap !8
   dup 2 COLS * 0 + + 1 swap !8
   dup 2 COLS * 1 + + 1 swap !8
   dup 2 COLS * 2 + + 1 swap !8
   drop
end

proc main
  100000000 delta_time 8 + !64

  board_current put_glider

  while true do
    display_current_board
    compute_next_board
    swap_boards

    NULL delta_time 0 CLOCK_MONOTONIC clock_nanosleep drop
    "\033[" puts ROWS putu "A" puts
    "\033[" puts COLS putu "D" puts
  end
end

main
